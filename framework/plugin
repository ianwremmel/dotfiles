#!/usr/bin/env bash

PLUGINS=${PLUGINS:-()}
CONFIGURED_PLUGINS=${CONFIGURED_PLUGINS:-()}
APPLIED_PLUGINS=${APPLIED_PLUGINS:-()}

_plugin_call_in_dep_order () {
  local func_name=$1
  local -n dep_array=$2

  for plugin in "${dep_array[@]}"; do
    $func_name "$plugin"
  done
}

_plugin_deps_array () {
  local plugin_name=$1
  echo "DOTFILES_${plugin_name^^}_DEPS"
}


plugin_configure_all () {
  for plugin in $(plugin_list_plugins); do
    plugin_config_ensure "$plugin"
  done
}

plugin_config_ensure () {
  local plugin_name=$1

  local usage_string='usage: plugin_config_ensure <plugin_name>'

  if [ "$plugin_name" == "" ]; then
    error "$usage_string"
    exit 1
  fi

  if array_contains CONFIGURED_PLUGINS "$plugin_name"; then
    debug "$plugin_name is already configured"
    return 0
  fi

  CONFIGURED_PLUGINS+=("$plugin_name")

  _plugin_call_in_dep_order plugin_config_ensure "$(_plugin_deps_array "$plugin_name")"

  local plugin_config_list_var="DOTFILES_${plugin_name^^}_CONFIG"
  if ! is_set "$plugin_config_list_var"; then
    debug "$plugin_name has no config"
    return 0
  fi

  doit () {
    local config_name=$1
    local env_name="DOTFILES_${plugin_name^^}_CONFIG_${config_name^^}"
    debug "$plugin_name: Checking for '$env_name'"
    set +u
    if ! is_set "$env_name"; then
      debug "'$env_name' not found, prompting user"
      plugin_config_prompt "$plugin_name" "$config_name"
    fi
    set -u
  }

  array_map doit "$plugin_config_list_var"
}

plugin_config_get () {
  local plugin_name=$1
  local config_name=$2

  local usage_string='usage: plugin_config_get <plugin_name> <config_name>'

  if [ "$plugin_name" == "" ]; then
    error "$usage_string"
    exit 1
  fi

  if [ "$config_name" == "" ]; then
    error "$usage_string"
    exit 1
  fi

  config_read "DOTFILES_${plugin_name^^}_CONFIG_${config_name^^}"
}

plugin_config_prompt () {
  local plugin_name=$1
  local config_name=$2

  local usage_string='usage: plugin_config_prompt <plugin_name> <config_name>'

  if [ "$plugin_name" == "" ]; then
    error "$usage_string"
    exit 1
  fi

  if [ "$config_name" == "" ]; then
    error "$usage_string"
    exit 1
  fi

  if ! function_exists "dotfiles_${plugin_name}_prompt_string"; then
    echo "$plugin_name expects config '$config_name' but did not provide a corresponding prompt string"
    return 1
  fi

  local prompt_string
  prompt_string=$("dotfiles_${plugin_name}_prompt_string" "$config_name")

  local var_name
  var_name="DOTFILES_${plugin_name^^}_CONFIG_${config_name^^}"

  local value
  read -rp "$prompt_string: " value

  config_write "$var_name" "$value"
  # not the most efficient, but probably the easiest way to avoid messing up the
  # var name during assignment
  config_load
}

plugin_get_path () {
  usage='usage: plugin_get_path <plugin> [<filename>]'
  local plugin_name=$1
  local filename=${2:-''}

  if [ "$plugin_name" == '' ]; then
    error "$usage"
    return 1
  fi

  echo "$DOTFILES_ROOT_DIR/plugins/$plugin_name/$filename"
}

plugin_list_plugins () {
  for plugin in "$DOTFILES_ROOT_DIR/"plugins/*; do
    basename "$plugin"
  done
}

plugin_load_all () {
  for plugin in $(plugin_list_plugins); do
    log "Loading plugin $plugin"
    # shellcheck disable=SC1090
    source "$DOTFILES_ROOT_DIR/plugins/$plugin/$plugin"
    PLUGINS+=("$plugin")
  done
}

plugin_run_hook () {
  local plugin_name=$1
  local hook_name=$2
  local usage_string='usage: run_hook <plugin_name> <hook_name>'

  if [ "$plugin_name" == "" ]; then
    error "$usage_string"
    exit 1
  fi

  if [ "$hook_name" == "" ]; then
    error "$usage_string"
    exit 1
  fi

  (
    cd "plugins/$plugin_name" || return
    "dotfiles_${plugin_name}_${hook_name}"
  )
}

plugin_run_plugin () {
  local plugin_name=$1
  local usage_string='usage: plugin_run_plugin <plugin_name>'

  if [ "$plugin_name" == "" ]; then
    error "$usage_string"
    exit 1
  fi

  if array_contains APPLIED_PLUGINS "$plugin_name"; then
    return 0
  fi

  APPLIED_PLUGINS+=("$plugin_name")

  plugin_config_ensure "$plugin_name"

  _plugin_call_in_dep_order plugin_run_plugin "$(_plugin_deps_array "$plugin_name")"

  plugin_run_hook "$plugin_name" apply
}

plugin_run_plugins () {
  for plugin in $(plugin_list_plugins); do
    debug "Running plugin $plugin"
    plugin_run_plugin "$plugin"
    debug "Done running plugin $plugin"
  done
}
